// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia/v4/internal/authentication (interfaces: FileUserProviderDatabase)
//
// Generated by this command:
//
//	mockgen -package authentication -destination mock_file_user_provider_database_test.go -mock_names FileUserProviderDatabase=MockFileUserProviderDatabase github.com/authelia/authelia/v4/internal/authentication FileUserProviderDatabase
//
// Package authentication is a generated GoMock package.
package authentication

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileUserProviderDatabase is a mock of FileUserProviderDatabase interface.
type MockFileUserProviderDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockFileUserProviderDatabaseMockRecorder
}

// MockFileUserProviderDatabaseMockRecorder is the mock recorder for MockFileUserProviderDatabase.
type MockFileUserProviderDatabaseMockRecorder struct {
	mock *MockFileUserProviderDatabase
}

// NewMockFileUserProviderDatabase creates a new mock instance.
func NewMockFileUserProviderDatabase(ctrl *gomock.Controller) *MockFileUserProviderDatabase {
	mock := &MockFileUserProviderDatabase{ctrl: ctrl}
	mock.recorder = &MockFileUserProviderDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUserProviderDatabase) EXPECT() *MockFileUserProviderDatabaseMockRecorder {
	return m.recorder
}

// GetUserDetails mocks base method.
func (m *MockFileUserProviderDatabase) GetUserDetails(arg0 string) (FileUserDatabaseUserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetails", arg0)
	ret0, _ := ret[0].(FileUserDatabaseUserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetails indicates an expected call of GetUserDetails.
func (mr *MockFileUserProviderDatabaseMockRecorder) GetUserDetails(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetails", reflect.TypeOf((*MockFileUserProviderDatabase)(nil).GetUserDetails), arg0)
}

// Load mocks base method.
func (m *MockFileUserProviderDatabase) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockFileUserProviderDatabaseMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockFileUserProviderDatabase)(nil).Load))
}

// Save mocks base method.
func (m *MockFileUserProviderDatabase) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileUserProviderDatabaseMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileUserProviderDatabase)(nil).Save))
}

// SetUserDetails mocks base method.
func (m *MockFileUserProviderDatabase) SetUserDetails(arg0 string, arg1 *FileUserDatabaseUserDetails) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserDetails", arg0, arg1)
}

// SetUserDetails indicates an expected call of SetUserDetails.
func (mr *MockFileUserProviderDatabaseMockRecorder) SetUserDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserDetails", reflect.TypeOf((*MockFileUserProviderDatabase)(nil).SetUserDetails), arg0, arg1)
}
